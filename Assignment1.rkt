#|
  Author: joshua Harris
  Student #: 101091864
  ============================================================
  |                      Assigment#1                         |
  ============================================================
|#
(newline)
(newline)
(display "            Author: Joshua Harris                  Student #: 101091864")
(newline)
(display "            ============================================================")
(newline)
(display "            |                      Assigment#1                         |")
(newline)
(display "            ============================================================")
(newline)
(newline)
(display " Question 1")
(newline)
(display "Rewrite the following expressions as Scheme expressions")
(newline)
(newline)
;Question 1 a
(display"a. [2 marks] 1 + -2 - 3 + 4 + -5 + 6")
(newline)
(display"      (+(+(+(-(+ 1 -2) 3) 4) -5) 6) : Expected: 1 Actual= ")(+(+(+(-(+ 1 -2) 3) 4) -5) 6)
(newline)
(newline)
;Question 1 b
(display "b.[2 marks] 20-1+((26/2 + 2)*(20/5 - 2))")
(newline)
(display "     (+ (- 20 1)(* (+ 2 (/ 26 2)) (-(/ 20 5) 2))) : Expected: 49 Actual: ")
(+ (- 20 1)(* (+ 2 (/ 26 2)) (-(/ 20 5) 2)))
(newline)
(newline)
; Question 1 c
(display"c. [2 marks] (63/9*(12/4-14/(13+2))+12)/4 ")
(newline)
(display"      (/ (+ 12 (* (/ 63 9) (- (/ 12 4) (/ 14 (+ 13 +2))))) 4) Expected: 6(37/60) Actual: ")
(/ (+ 12 (* (/ 63 9) (- (/ 12 4) (/ 14 (+ 13 +2))))) 4)
(newline)
(newline)
; Question 1 d
(display "d. [2 marks]((50*20)*2)+((17/4)+3.85)+((30*2)-48)")
(newline)
(newline)
(display "(+ (+ (* (* 50 20) 2)(+ (/ 17 4) 3.85))(- (* 30 2) 48)) Expected:2020.1 Actual: ")
(+ (+ (* (* 50 20) 2)(+ (/ 17 4) 3.85))(- (* 30 2) 48))
(newline)
(newline)

; Question 2 a
(display "Question 2 ")
(newline)
(display "Create a procedure (cube x) that computes x^3.")
(newline)
(Display "(define (cube y)(* y (* y y)))")
(define (cube y)(* y (* y y)))  ;define cube
(newline)
(display "              test of x^3:")
(newline)
(display "                : (cube 5) : Expected=125 Actual=")(cube 5)
(display "                : (cube 60) : Expected=216000 Actual=")(cube 60)
(display "                : (cube 100) : Expected=1000000 Actual=")(cube 100)
(newline)

; Question 2 b
(newline)
(display "       b.Create a procedure that computes the following function:")
(newline)
(newline)
(display "              f(x) = 3x^2 + 4 ")
(newline)
(display "              (define (f x)(+ (* 3 (* x x)) 4))")
(define (f x)(+ (* 3 (* x x)) 4))
(newline)
(display "              test of f(x):")
(newline)
(display "                : (f(2)) : Expected=16 Actual=")(f 2)
(display "                : (f(60)) : Expected=10804 Actual=")(f 60)
(display "                : (f(100)) : Expected=30004 Actual=")(f 100)

; Quesion 2 c
(newline)
(display "       c.Create a procedure that computes the following function:")
(newline)
(display "             g(x)=f(2x) - 2x^3 ")
(newline)
(display "(define (g b)(- (f (* 2 b)) (* 2 (cube b))))")
(define (g b)(- (f (* 2 b)) (* 2 (cube b))))
(newline)
(display "              test of g(x):")
(newline)
(display "                : (g(2)) : Expected=36 Actual=")(g 2)
(display "                : (g(60)) : Expected=-388796 Actual= ")(g 60)
(display "                : (g(100)) : Expected=-1879996 Actual=")(g 100)
(newline)
(newline)

 ;Question 2 d
(newline)
(display "       d.Create a procedure that computes the following function:")
(newline)
(newline)
(display "            h(x) = 2f(x/2) + g(x) ")
(newline)
(display "             (define (h x)(+ (* 2 (f (/ x 2))) (g x)))")
(define (h x)(+ (* 2 (f (/ x 2))) (g x)))
(newline)
(display "              test of h(x):")
(newline)
(display "                : (h(2)) : Expected=50 Actual=")(h 2)
(display "                : (h(60)) : Expected=-383388 Actual= ")(h 60)
(display "                : (h(100)) : Expected=-1864988 Actual=")(h 100)
(newline)
(newline)
  
;Question 2 e
(display " question 2 e")(newline)
(display"Provide the substitution model using applicative order for (h (* 2 3)).")
(newline)
(display "(h (* 2 3))")
(newline)
(display "(h 6)")
(newline)
(display "(+ (* 2 (f (/ 6 2))) (g 6))")
(newline)
(display "(+ (* 2 (f (/ 6 2))) (- (f (* 2 6)) (* 2 (cube 6))))")
(newline)
(display "(+ (* 2 (+ (* 3 (* 3 3)) 4)) (- (f 12) (* 2(cube 6))))")
(newline)
(display "(+ (* 2 (+ (* 3 (* 3 3)) 4)) (- (+ (* 3 (* 12 12)) 4) (* 2 (cube 6))))")
(newline)
(display "(+ (* 2 (+ (* 3 9) 4)) (- (+ (* 3 (* 12 12)) 4) (* 2 (cube 6))))")
(newline)
(display "(+ (* 2 (+ (* 3 9) 4)) (- (+ (* 3 144) 4) (* 2 (cube 6))))")
(newline)
(display "(+ (* 2 (+ 27 4)) (- (+ (* 3 144) 4) (* 2 (cube 6))))")
(newline)
(display "(+ (* 2 31) (- (+ (* 3 144) 4) (* 2 (cube 6))))")
(newline)
(display "(+ 62 (- (+ (* 3 144) 4) (* 2 (cube 6))))")
(newline)
(display "(+ 62 (- (+ 432 4) (* 2 (* 6 (* 6 6)))))")
(newline)
(display "(+ 62 (- (+ 432 4) (* 2 (* 6 36))))")
(newline)
(display "(+ 62 (- (+ 432 4) (* 2 216)))")
(newline)
(display "(+ 62 (- 436 (* 2 216)))")
(newline)
(display "(+ 62 4)")
(newline)
(display "66")
(newline)
(newline)
(newline)
;Question 2 f
(display " Start of 2 f")(newline)
(newline)
(display"Provide the substitution model using normal order for (h (* 2 3)).")
(newline)
(display "(h (* 2 3))")
(newline)
(display "(+ (* 2 (f (/ 6 2))) (g (* 2 3)))")  ;(FIXXXXXXXX
(newline)
(display "(+ (* 2 (f (/ 6 2))) (- (f (* 2 6)) (* 2 (cube (* 2 3)))))")
(newline)
(display "(+ (* 2 (f (/ 6 2))) (- (f (* 2 6)) (* 2 (* (* 2 3) (* (* 2 3) (* 2 3))))))")
(newline)
(display "(+ (* 2 (+ (* 3 (* (/ 6 2) (/ 6 2))) 4)) (- (f (* 2 6)) (* 2(* (* 2 3) (* (* 2 3) (* 2 3))))))")
(newline)
(display "(+ (* 2 (+ (* 3 (* (/ 6 2) (/ 6 2))) 4)) (- (+ (* 3 (* (* 2 6) (* 2 6))) 4) (* 2 (* (* 2 3) (* (* 2 3) (* 2 3)))))")
(newline)
(display "(+ (* 2 (+ (* 3 (* (/ 6 2) (/ 6 2))) 4)) (- (+ (* 3 (* (* 2 6) (* 2 6))) 4) (* 2 (* (* 2 3) (* (* 2 3)  6)))))")
(newline)
(display "(+ (* 2 (+ (* 3 (* (/ 6 2) (/ 6 2))) 4)) (- (+ (* 3 (* (* 2 6) (* 2 6))) 4) (* 2 (* (* 2 3) (* 6 6)))))")
(newline)
(display "(+ (* 2 (+ (* 3 (* (/ 6 2) (/ 6 2))) 4)) (- (+ (* 3 (* (* 2 6) (* 2 6))) 4) (* 2 (* (* 2 3)  36))))")
(newline)
(display "(+ (* 2 (+ (* 3 (* (/ 6 2) (/ 6 2))) 4)) (- (+ (* 3 (* (* 2 6) (* 2 6))) 4) (* 2 (* 6 36))))")
(newline)
(display "(+ (* 2 (+ (* 3 (* (/ 6 2) (/ 6 2))) 4)) (- (+ (* 3 (* (* 2 6) (* 2 6))) 4) (* 2 216)))")
(newline)
(display "(+ (* 2 (+ (* 3 (* (/ 6 2) (/ 6 2))) 4)) (- (+ (* 3 (* (* 2 6) (* 2 6))) 4) 432))")
(newline)
(display "(+ (* 2 (+ (* 3 (* (/ 6 2) (/ 6 2))) 4)) (- (+ (* 3 (* (* 2 6) 12)) 4) 432))")
(newline)
(display "(+ (* 2 (+ (* 3 (* (/ 6 2) (/ 6 2))) 4)) (- (+ (* 3 (* 12 12)) 4) 432))")
(newline)
(display "(+ (* 2 (+ (* 3 (* (/ 6 2) (/ 6 2))) 4)) (- (+ (* 3 144) 4) 432))")
(newline)
(display "(+ (* 2 (+ (* 3 (* (/ 6 2) (/ 6 2))) 4)) (- (+ 432 4) 432))")
(newline)
(display "(+ (* 2 (+ (* 3 (* (/ 6 2) (/ 6 2))) 4)) (- 436 432))")
(newline)
(display "(+ (* 2 (+ (* 3 (* (/ 6 2) (/ 6 2))) 4)) 4)")
(newline)
(display "(+ (* 2 (+ (* 3 (* (/ 6 2) 3)) 4)) 4)")
(newline)
(display "(+ (* 2 (+ (* 3 (* 3 3)) 4)) 4)")
(newline)
(display "(+ (* 2 (+ (* 3 9) 4)) 4)")
(newline)
(display "(+ (* 2 (+ 27 4)) 4)")
(newline)
(display "(+ (* 2 31) 4)")
(newline)
(display "(+ 62 4)")
(newline)
(display "66")


(newline)
(newline)
(newline)
;Question 3a ( quadratic formula
; The procedure should return false (#f) if there are no real roots
;(this occurs when the discriminant (b2 - 4ac) is negative, or if a is 0).

;squart root function taken from https://gist.github.com/samertm/1518613 for squart root function
(display " Question 3a ")(newline)(newline)
(display"Create the procedure (quadratic a b c) to calculate the roots of a quadratic formula with coefficient a, b, and c.")(newline)
(display"The procedure should return false (#f) if there are no real roots (this occurs when the discriminant (b2 - 4ac) is negative, or if a is 0)")(newline)

(define (sqrt x)
  (define (average lhs rhs)
    (/ (+ lhs rhs) 2))
  (define (good-enough? guess)
    (< (abs (- (square guess) x)) .0001))
  (define (improve guess)
    (average guess (/ x guess)))
  (define (try guess)
    (if (good-enough? guess)
	guess
	(try (improve guess))))
  (try 1))

(display " Created dicriminat subproccess")(newline)
(display "(define (discriminant a b c) (- (* b 2)(* 4 (* c a))))")(newline)
(define (quadratic a b c)
  (define (discriminant a b c) (- (* b 2)(* 4 (* c a))))           ;define sub function discriminate
 (if (or (= a 0) (< (discriminant a b c) 0))                        ;if a= 0 or discriminat is a negative number return false
     (Display "#f")
     (/ (+ -b (sqrt (- (* b b)(* 4 (* c a))))) (* 2 a))))          ; else return the the result of quadratice ony with +
(newline)
(display "testing quadratic formula")(newline)
(display "(quadratic 1 3 4) Expected: 1 Actual")(quadratic 1 3 4)(newline)

;Question 3 b
(newline)
(newline)
(display"Question 3 b")(newline)
(display "Write a procedure called convert that takes as arguments: an amount (number), and two strings representing the input and output units respectively")(newline)
(display "The procedure should support conversions to or from any combination of Bytes ('B'), KiloBytes ('KB'), and KibiBytes ('KiB')")(newline)
(display "Any other unit argument should result in the return of an error string.")(newline)
(define (convert num str1 str2)
  (if (integer? num)                                            ; Is num an int?
          (let ((KB 1000)
               (KiB 1024))
             (cond ((and (equal? str1 "KB")(equal? str2 "B"))(* num KB))
                    ((and (equal? str1 "KB")(equal? str2 "KiB"))(/ num 1.024))
                    ((and (equal? str1 "KiB")(equal? str2 "KB"))(* num 1.024))
                    ((and (equal? str1 "KiB")(equal? str2 "B"))(* num KiB))
                    ((and (equal? str1 "B")(equal? str2 "KB"))(/ num KB))
                    ((and (equal? str1 "B")(equal? str2 "KIB"))(/ num KiB))
                   (else (display "Could not convert from ")(display str1)(display " to ")(display str2)(newline))  ; ask about this condisiont??????
           )
         )
      (display" Could not convert, please enter a integer in the first argumment ")  ;shown when int not inputed
      )
  )
(newline)
(display "Testing convert")(newline)
(display "(convert 42 'KB' 'B')  Expected: 42000 Actual: ")(convert 42 "KB" "B")
(newline)
(display "(convert 42 'KiB' 'KB')  Expected: 43.008 Actual: ")(convert 42 "KiB" "KB")
(newline)
(display "(convert 42 'KB' 'KiB')  Expected: 41.015625 Actual: ")(convert 42 "KB" "KiB")
(newline)
(display "(convert nef 'KB' 'B')  Expected: 'please enter int' Actual: ")(convert "nef" "KB" "KiB")
(newline)
(display "(convert 42 'KiefB' 'Bsdfsd')  Expected: could not convert Actual: ")(convert 42 "KiefB" "Bsdfsd") 

(newline)
(newline)
;Question 4 a
(display " Question 4 a")
(newline)
(display"Define a procedure called user-num that takes a single string representing a prompt as argument. The procedure should display the prompt and read a single value from the user. ")
(newline)
(display "Finally, ensure that the user entered a valid number and return a default value of 0 if they did not.")(newline)
(newline)
(define (user-num userInput)
  (Display userInput)              ; Display the arugement passed in 
     (define uResponse (read))          ; Let the variable (uResponse) hold input from user
    (if (integer? uResponse)( Display uResponse)(Display "0")))   ; If the uResponse is an integer, output uRsponse. Else output 0
(display"user-num 'Enter a number: ->'")(user-num "Enter a number: ")
(display"user-num 'Hello!  ->'")(user-num "Hello ")

(newline)
(newline)
;QUESTION 4 b

#|
Positive Iterator
If the number passed in is less then 1 digit(less then 0). Multiply by 10 until it is 1 digit.
Every posative iteration will +1 to counter
return counter, if there are no iterations (0)
|#
(define (posIterator sciNum counter)
  (if (< sciNum 1.00000) (posIterator (* sciNum 10.0000000)(- counter 1)) counter)
  )
#|
Negative Iterator
If the number passed in is lerger then 1 digit. Divide by 10 until it is 1 digit.
Every negative iteration will -1 from counter
return counter, if there are no iterations 
|#
(define (negIterator sciNum counter) 
  (if (> sciNum 9.99999999)
      (negIterator (/ sciNum 10)(+ counter 1))
      counter)
  )

#|
Sci-exponent
Argument: a integer
Returns: # of exponent (10^num) needed to convert number to scientific notation.

Code:
(posIterator num counter)
(negIterator num counter)
|#
(newline)
(newline)
(display "Question 4 b")
(newline)
(define counter 0)
(define (sci-exponent num)
  (if (negative? num) (= num -num))
   (posIterator num counter)
   (negIterator num counter)   
      )

;tests for 4 b
;(Display "These are test cases for 4 b")(newline)

(display "test cases")(newline)
(display"(sci-exponent 1.234)  Expected: 0 Actual: ")(sci-exponent 1.234)
(display"(sci-exponent 12345) Expected: 4 Actual: ")(sci-exponent 12345)
;(sci-exponent 0.001234)
;(sci-exponent -12345)


;Question 4 c
;(define (sci-coefficient num)
  
 ; )

(newline)
(newline)
(newline)
;Question 5
(display "Question 5 ")(newline)(newline)
(display "The following program can be used to determine if a given interpreter is using applicative-order or normal-order evaluation:")
(newline)
(display "(define (test x y)")
(newline)
(display "  (if (= x 0) ")
(newline)
(display "       x")
(newline)
(display "       y))")
(newline)
(newline)
(display "(test 0 (/ 3 0)))")
(newline)
(display "5a")
(newline)
(display "The behaviour of this code if evaluated using a applicative-order will be an error. As stated in the notes")(newline)
(display "in a applicative order functions are evluated before passing the result to the next argument. The error arises ")(newline)
(display "when dividing by 0. This will result in an error")(newline)
(newline)
(display "5b")
(newline)
(display "The result of would be zero if evaluated in normal-order. ")(newline)
(display" This will evaluate the expressions in a distorted order:") (newline)
(display "  (test 0 (/ 3 0))")
(newline)
(display "    (if (= 0 0) 0 (/ 3 0))")
(newline)
(display "       0")
(newline)
(newline)
;Question 6
(newline)
(newline)
(display "Question 6")
(define (foo a b)((cond ((> b 0) +)((= b 0) *)(else /)) a b))
(display "Observe that Scheme's model of evaluation allows for combinations whose operators are compound expressions.")(newline)
(display "Use this observation to describe the behaviour of the following procedure:")(newline)
(display "  (define (foo a b)")
(newline)
(display "    ((cond ((> b 0) +)((= b 0) *)(else /)) a b))")
(newline)
(newline)
(display "Answer    ")
(newline)
(display" The behaviour of the function is dependent on 'b' because it is a compound procedure all coniditions depend on 'b'.")(newline)
(display "This program will 'a' + 'b' if 'b' > 0. If 'b' = 0 then it will multiply both numbers. In every other case a / b")(newline)
(newline)
(display "              test of (foo a b):")
(newline)
(display "                 : (foo 8 1): Expected= 9 Actual= ")(foo 8 1)
(display "                 : ((cond ((> 1 0) +)((= 1 0) *)(else /)) 8 1))")
(newline)
(display "                 : ((#t +)(#f *)(#f /)) 8 1))")
(newline)
(display "                 : ((+ 8 1))")
(newline)
(display "                 : 9")
(newline)
(display "                 : (foo 8 0): Expected= 0 Actual= ")(foo 8 0)
(display "                 : ((cond ((> 0 0) +)((= 0 0) *)(else /)) 8 0))")
(newline)
(display "                 : ((#f +)(#t *)(#f /)) 8 0))")
(newline)
(display "                 : ((* 8 0))")
(newline)
(display "                 : 8")
(newline)
(display "                 : (foo 8 -1): Expected= -8 Actual= ")(foo 8 -1)
(display "                 : ((cond ((> -1 0) +)((= -1 0) *)(else /)) 8 -1))")
(newline)
(display "                 : ((#f +)(#f *)(#t /)) 8 -1))")
(newline)
(display "                 : ((/ 8 -1))")
(newline)
(display "                 : -8")

