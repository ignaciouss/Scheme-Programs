(newline)
(newline)
(display "            Author: Joshua Harris                  Student #: 101091864")
(newline)
(display "            ============================================================")
(newline)
(display "            |                      Assigment#3                          |")
(newline)
(display "            ============================================================")
(newline)
(newline)
(display " Question 1 a")
(newline)
(display"Define a function (compose f g) that returns a composed function f âˆ˜ g, such that the following usage works as shown. ")
(newline)
(display"    (define square (lambda(x)(* x x)))")
(newline)
(display"    (define double (lambda(x)(+ x x)))")
(newline)
(display"    ((compose square double) 3) -> 6^2 = 36")
(newline)
(display "CODE")
(define (compose f g)
  (lambda (x)(f(g x))))

(display "(define (compose f g)")
(newline)
(display "  (lambda (x)(f(g x))))")
(newline)
(display "Test case")
(newline)
(display "(define square (lambda(x)(* x x)))")
(newline)
(display "(define double (lambda(x)(+ x x)))")
(newline)
(display"((compose square double) 3)  Expected: 36 Actual: ")

(define square (lambda(x)(* x x)))
(define double (lambda(x)(+ x x)))
((compose square double) 3)


(newline)
(newline)
(newline)

;QUESTION 1 C



(display"Question 1c")
(newline)

(define (newmap func)
  (lambda (lis)
    (define (map-it L)
      (if (null? l)
          '()
          (cons (func (car L)) (map-it (cdr L)))))
    (map-it lis)))

(define double-mapper (newmap (lambda(x)(* x 2))))

(display"CODE")
(newline)
(newline)
(display"(define (newmap func)")
(newline)
(display " (lambda (lis)")
(newline)
(display "   (define (map-it L) ")
(newline)
(display "     (if (null? l)")
(newline)
(display "         '()")
(newline)
(display "        (cons (func (car L)) (map-it (cdr L)))))")
(newline)
(display "      (map-it lis)))")
(newline)
(display " (define double-mapper (newmap (lambda(x)(* x 2))))")
(newline)
(newline)
(newline)




(newline)
(display " Test Cases")
(newline)
(display " (double-mapper '(1 2 3 4)): Expected: (2 4 6 8) Actual: ")
(double-mapper '(1 2 3 4))
(display " (doublemapper '(10 20 30 40)): Expected: (20 40 60 80) Actual: ")
(double-mapper '(10 20 30))
(display " (double-mapper '(1000 2000 3000 4000)): Expected: (2000 4000 6000 8000) Actual: ")
(double-mapper '(1000 2000 3000 4000))

; QUESTION 1 D ( needs modification)
(newline)
(display "Question 1 d")
(newline)
(display "Code")
(newline)

(define (newfilter f)
  (lambda (list)
    (define (filter-it L)
      (cond ((null? L)'())
          (else (cons (f (car l)) (filter-it (cdr l))))))
    (filter-it list)))

(define filterEvens (newfilter (divisibleBy 2)))
(define bigNums   (newfilter #t (lambda(x)(> x 25))))
(define smallNums (newfilter #f (lambda(x)(> x 25))))

(display "  (filterEvens '(1 2 3 4)): Expected: (#f #t #f #t) Actual: ")(filterEvens '(1 2 3 4))
(display "  (filterEvens '(10 20 30 40)): Expected: (#t #t #t #t) Actual: ")(filterEvens '(10 20 30 40))
(display "  (filterEvens '(100 200 300 400)): Expected: (#t #t #t #t) Actual: ")(filterEvens '(100 200 300 400))

(display "")
(newline)
(display "")
(newline)
(display "")
(newline)
(display "")
(newline)
(display "")
(newline)
(display "")
(newline)
(display "")
(newline)
(display "")